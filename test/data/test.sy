int cv = 100;
int v = cv;
int a = 1, b, c = 3;
void testArm() {
  1+1;
}
void testShortCircuit(int a, int b, int c) {
  while (a && b) {
    a = 1;
  }
  while (a || b) {
    a = 1;
  }
  if (a == b <= c)
    a = 1;
  if (a && b) {
    a = 1;
  }
  if (a || b) {
    a = 1;
  } else {
    a = 2;
  }
  if (a && b || c) {
    a = 1;
  } else {
    a = 2;
  }
  if (a || b && c) {
    a = 1;
  } else {
    a = 2;
  }
  if (a && b) {
    a = 1;
    if (a && b) {
      a = 1;
    }
  } else {
    a = 2;
    if (a && b) {
      a = 1;
    }
  }
}
int testContinueBreak(int a, int b) {
  while (a < b) {
    while (1) {
      /// 
      while (1) {
        return;
      }
      break;
    }
    break;
    a = a + 1;
    if (a < b) {
      a = 1;
      continue;
      a = 1;
    } else {
      a = 1;
      break;
      a = 1;
    }
    if (a == b)
      break;
    a = 1;
    continue;
    a = 1;
  }
  while (1) {
    a = 1;
    break;
    a = 1;
  }
  a = 1;
  while (1) {
    a = 1;
    return 0;
    a = 1;
  }
  a = 1;
  if (1) {
    a = 1;
    return 0;
    a = 1;
  }
  a = 1;
  return 0;
  a = 1;
}
/*
int testWhile(int a, int b) {
  a = 1;
  while (a < b) {
    a = a + 1;
  }
  a = 1;
  return 0;
}
int testBranch(int a, int b) {
  int c = 0;
  if (a > b) {
    c = a;
  } else {
    c = b;
  }
  if (1 < 0 || a > b && 1 > 0 && !!!(a)) {
    return -1;
  }
  return c;
}
int testCall(int a, int b) {
	int c = testCall(a, b+1);
	return c;
}
int testVarDecl() {
	int a = 4, b, c = 6;
	b = 2;
	return a + b + c;
}
int testParam(int a, int b) {
	a = 2;
	return a + b;
}
int d = 2 * 56 - 10;
int testExpr() {
	int b;
	0x1.8p1 + 0X1.p-1 + 0x.8P2;
    1+2*(3+4);
	---2;
	return +5-6/(7-8)%9;
}
int e = 1+2*(3+4);
void func1(float x) {
	return;
}
void func2() {
	func1();
}
int gv = (87) / 2;
int test_gv() {
	return gv;
}
int testArray() {
  int a[2][5][8];
  float b[103][1000];
  int c[5][6] = {{3, 1, 4}, {2, 5}, {}, {10}};
  //int d[3][2] = {{}, {3,4},5,6};
  //int arr[2][3][4] = {1, 2, 3, 4, {5}, {6}, {7, 8}};
  return 0;
}
*/

const int a1[3] = {3, 1, 4};
int a2[3] = {1, 1, a1[2]};

int main(){
    const int a[4][2] = {{1, 2}, {3, 4}, {}, 7};
    const int N = 3;
    int b[4][2] = {};
    int c[4][2] = {1, 2, 3, 4, 5, 6, 7, 8};
    int d[N + 1][2] = {1, 2, {3}, {5}, a[3][0], 8};
    int e[4][2][1] = {{d[2][1], {c[2][1]}}, {3, 4}, {5, 6}, {7, 8}};
    return e[3][1][0] + e[0][0][0] + e[0][1][0] + d[3][0];
}
